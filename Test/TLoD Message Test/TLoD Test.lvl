SMBXFile69
A|0||||,,,
BTNS|Mario|Luigi|Peach|Toad|Link
P1|-179960|-180110
M|1|-200000|-200600|800|600|0|0|0|0|0|0|0|0,-1|
M|2|-180000|-180600|800|600|0|0|0|0|0|0|0|0,-1|
M|3|-160000|-160600|800|600|0|0|0|0|0|0|0|0,-1|
M|4|-140000|-140600|800|600|0|0|0|0|0|0|0|0,-1|
M|5|-120000|-120600|800|600|0|0|0|0|0|0|0|0,-1|
M|6|-100000|-100600|800|600|0|0|0|0|0|0|0|0,-1|
M|7|-80000|-80600|800|600|0|0|0|0|0|0|0|0,-1|
M|8|-60000|-60600|800|600|0|0|0|0|0|0|0|0,-1|
M|9|-40000|-40600|800|600|0|0|0|0|0|0|0|0,-1|
M|10|-20000|-20600|800|600|0|0|0|0|0|0|0|0,-1|
M|11|0|-600|800|600|0|0|0|0|0|0|0|0,-1|
M|12|20000|19400|800|600|0|0|0|0|0|0|0|0,-1|
M|13|40000|39400|800|600|0|0|0|0|0|0|0|0,-1|
M|14|60000|59400|800|600|0|0|0|0|0|0|0|0,-1|
M|15|80000|79400|800|600|0|0|0|0|0|0|0|0,-1|
M|16|100000|99400|800|600|0|0|0|0|0|0|0|0,-1|
M|17|120000|119400|800|600|0|0|0|0|0|0|0|0,-1|
M|18|140000|139400|800|600|0|0|0|0|0|0|0|0,-1|
M|19|160000|159400|800|600|0|0|0|0|0|0|0|0,-1|
M|20|180000|179400|800|600|0|0|0|0|0|0|0|0,-1|
M|21|200000|199400|800|600|0|0|0|0|0|0|0|0,-1|
B||1|-200000|-200032||0|0||32|32
B||115|-200000|-200000||0|0||32|32
B||1|-199968|-200032||0|0||32|32
B||115|-199968|-200000||0|0||32|32
B||1|-199936|-200032||0|0||32|32
B||115|-199936|-200000||0|0||32|32
B||281|-199904|-200096||0|0|,%41,,|32|32
B||1|-199904|-200032||0|0||32|32
B||115|-199904|-200000||0|0||32|32
B||1|-199872|-200032||0|0||32|32
B||115|-199872|-200000||0|0||32|32
B||1|-199840|-200032||0|0||32|32
B||115|-199840|-200000||0|0||32|32
B||281|-199808|-200096||0|0|,%42,,|32|32
B||1|-199808|-200032||0|0||32|32
B||115|-199808|-200000||0|0||32|32
B||1|-199776|-200032||0|0||32|32
B||115|-199776|-200000||0|0||32|32
B||1|-199744|-200032||0|0||32|32
B||115|-199744|-200000||0|0||32|32
B||281|-199712|-200096||0|0|,%43,,|32|32
B||1|-199712|-200032||0|0||32|32
B||115|-199712|-200000||0|0||32|32
B||1|-199680|-200032||0|0||32|32
B||115|-199680|-200000||0|0||32|32
B||1|-199648|-200032||0|0||32|32
B||115|-199648|-200000||0|0||32|32
B||281|-199616|-200096||0|0|,%44,,|32|32
B||1|-199616|-200032||0|0||32|32
B||115|-199616|-200000||0|0||32|32
B||1|-199584|-200032||0|0||32|32
B||115|-199584|-200000||0|0||32|32
B||1|-199552|-200032||0|0||32|32
B||115|-199552|-200000||0|0||32|32
B|,%45|281|-199520|-200096||0|0|,%45,,|32|32
B||1|-199520|-200032||0|0||32|32
B||115|-199520|-200000||0|0||32|32
B||1|-199488|-200032||0|0||32|32
B||115|-199488|-200000||0|0||32|32
B||1|-199456|-200032||0|0||32|32
B||115|-199456|-200000||0|0||32|32
B||1|-199424|-200032||0|0||32|32
B||115|-199424|-200000||0|0||32|32
B||1|-199392|-200032||0|0||32|32
B||115|-199392|-200000||0|0||32|32
B||1|-199360|-200032||0|0||32|32
B||115|-199360|-200000||0|0||32|32
B|,%45|281|-199328|-200096||0|0|,%54%65%73%74%4C%69%74%65,,|32|32
B||1|-199328|-200032||0|0||32|32
B||115|-199328|-200000||0|0||32|32
B||1|-199296|-200032||0|0||32|32
B||115|-199296|-200000||0|0||32|32
B||1|-199264|-200032||0|0||32|32
B||115|-199264|-200000||0|0||32|32
B||1|-199232|-200032||0|0||32|32
B||115|-199232|-200000||0|0||32|32
B||65|-180000|-180032||0|0||32|32
B||65|-179968|-180032||0|0||32|32
B||65|-179936|-180032||0|0||32|32
B||65|-179904|-180032||0|0||32|32
B||65|-179872|-180032||0|0||32|32
B||65|-179840|-180032||0|0||32|32
B||65|-179808|-180032||0|0||32|32
B||65|-179776|-180032||0|0||32|32
B||65|-179744|-180032||0|0||32|32
B||65|-179712|-180032||0|0||32|32
B||65|-179680|-180032||0|0||32|32
B||65|-179648|-180032||0|0||32|32
B||65|-179616|-180032||0|0||32|32
B||65|-179584|-180032||0|0||32|32
B||65|-179552|-180032||0|0||32|32
B||65|-179520|-180032||0|0||32|32
B||65|-179488|-180032||0|0||32|32
B||65|-179456|-180032||0|0||32|32
B||65|-179424|-180032||0|0||32|32
B||65|-179392|-180032||0|0||32|32
B||65|-179360|-180032||0|0||32|32
B||65|-179328|-180032||0|0||32|32
B||65|-179296|-180032||0|0||32|32
B||65|-179264|-180032||0|0||32|32
B||65|-179232|-180032||0|0||32|32
T||1|-200000|-200600
N||88|-179898|-180128|1,0,0,0,0,0|0|%53%61%6D%70%6C%65,,,,,,||0|
L|%44%65%66%61%75%6C%74|1
L|%44%65%73%74%72%6F%79%65%64%20%42%6C%6F%63%6B%73|0
L|%53%70%61%77%6E%65%64%20%4E%50%43%73|1
E|%4C%65%76%65%6C%20%2D%20%53%74%61%72%74||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/3
E|%50%20%53%77%69%74%63%68%20%2D%20%53%74%61%72%74||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0
E|%50%20%53%77%69%74%63%68%20%2D%20%45%6E%64||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0
E|%54%65%78%74%55%74%69%6C||1,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%54%65%78%74%44%72%61%77%55%74%69%6C
E|%54%65%78%74%42%6F%78%55%74%69%6C||1,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%54%65%78%74%42%6F%78
E|%42||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%42
E|%41||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%41
E|%43||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%43
E|%44||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%44
E|%45||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%45
E|%54%65%73%74%4C%69%74%65||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%54%65%73%74%4C%69%74%65
E|%53%61%6D%70%6C%65||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%53%61%6D%70%6C%65
V|%56|0|0
V|%56%32|0|0
V|%56%53%74%72|0|0
V|%69%69|0|0
SU|%44%65%63%6F%64%65%72||AQD4AAAAAAAAAA
SU|%54%65%78%74%42%6F%78||AQAYAAAAAAAAAA
SU|%42|J0RpbSBzIEFzIHN0cmluZyA9IFRYVChEKCJgYGEnICFFI2YkVychJCAhTSMgIVUjICFdIzY0LCBLIyElKTZGPS4gZyooJGgjdTUgIWkjICFuI2ssXShKQV0jNyowSCAhdSMhJGQjLiAgIXsjVj0mJXI4JyssIF4kKTFDJDwpLiAgISQkazVzOW5BdTUgISskLCAmNiAhaSMzLyElISREMSwgdkQsVmFZISRBPS4gICFEJGAgICAgYGBWJHs6LCAhJXwmXSMgIUYkbyVtIyEkaiMgIU4kLCBtPFU0XSMgIVQkMiViJCEkVywgIUUjLiBDJj5JPUY2KSwgXiR3Jy07NiQuIFQtRSNXKiEkJDBfKSwgQzNpI3QuISRnMn1ALiB3OXc5SCZfKXIvcztqQCYlLCBdJ0MkVi80LiQwVSQuIEVGRUZIJl8pIEBaJWw0XyYsIGcpbiRdJ3tBQCYuICAhRCRgLi4uLi4uYGAgIV0kICFjJGAgICAgYGBGLHkqICFoJGgjKCRnPTpnXSM2KSAhcCRCWSEkaiMsIHAvICF4JEIwXzNdJ0kkICFFI2xpPz0sICAhISVyMUUjfCUhJHo1XSgsIGs1VVczQUIleDJuQS4gJT5qX29lXSM2JEInLCA/QWwseDkhJEUjSz8uICAhKiV9NHkqNyYhJFk0Q04sIDBBaSQ2KSEkOSR8LC4gPjItJEAmQiVQXkpBLCAhLjMvISVdJ2kkfjEuIFYvQyRiJT8vZkhvPCwgOycgQGszXSNhPyYlLiAgIUQkYC4uLi4uLmBgICFEJGAgICAgYGB7JTckNiRCJyEkVywsIFsvdChaJ10mLCA/LnoueSohJCQwWicsIGQzRSM0PV0nNDc1Li4gej02KWojISRWPSYlLCBoI20jVywhJDMvISUsIEUnbzwhJF0nMSVOKiwgICF4JHolICEwJXQ/ICE4JSEkICFAJV0nICFIJWcnICFQJXcoICFFIywgNS4hJEMkUilLJiEkQyRaRS4gSzNMOFsvdy0hJDkkUik4SCokLCBdJ3kqaCMoJCEkJDBHJzI0YC4uLi4uLi8jMDAwMDAwL3NoYWtlKzQuc2l6ZS00MmV4c2l6ZSsyKzQsc2l6ZS5leHNpemUtc2hha2Uuc2l6ZS04LnNpemUrRUAkRkV2ZW50VGVzdDphYWFiYmJjY2NkZGQpbi9zd2luZys0LXN3aW5nLyNGRjAwMDAsd2FpdCxwYWdlL3NwZWVkKzEvc3BlZWQrMi8jQUFGRjAwL3NwZWVkLTItc3BlZWQvIzAwRkZDQy8jMDBBQTQ0LyNBQUNDMDAvI0FBMDBCQjEjRkZGRkZGNTUiKSkNCkRpbSBzIEFzIHN0cmluZyA9IFRYVChEKCJgYGwjICFFIzM4LCB1KHYjICFNIzY1YykgIVUjeS9FIzYkMzghICAhWyMgIWIjICFnIyAhdSMgIXwjLDghIGUpZSlwMz0rYCEhIS8jMDAwMDAwL3N3aW5nKzMtc3dpbmcsd2FpdCxwYWdlNSRDaGFuZ2VJY29uOjEuc2l6ZSs4L3NoYWtlKzQiKSkNCicgtffV+823z/G6zbbUu7C/8rP2z9bKsbzktcS85Lj0DQpDYWxsIFRleHRib3hfU2V0QW5pbUZhY09mZnNldCgwLCAwKQ0KJyDNt8/xDQpDYWxsIFRleHRib3hfU3RvcmVBdmF0YXIoMywgMCwgMCwgMTI4LCAxMjgpDQpDYWxsIFRleHRib3hfU3RvcmVBdmF0YXJTaGFwZSgxMDAsIDEwMCwgNDAsIDQwKQ0KQ2FsbCBUZXh0Ym94X1N0b3JlQXZhdGFyRnJvbVNoYXBlKDEwMCwgMTAwLCAwLDApDQpDYWxsIFRleHRib3hfU3RvcmVNc2dTaGFwZSgxNDUsIDEwMCwgNTU1LCAxMDApDQpDYWxsIFRleHRib3hfU3RvcmVNc2dGcm9tU2hhcGUoMTQ1LCAxMDAsIDAsIDApDQoNCg0KQ2FsbCBUZXh0Qm94X1N1Ym1pdChzLCAtMSkgJyDM4b27tPjNt8/xtcS21Luwv/INCg0KAA|AQAAAAAAAAAAAA
SU|%41|RGltIHMgQXMgc3RyaW5nID0gVFhUKEQoImBgYScgIUUjZiRXJyEkICFNIyAhVSMgIV0jNjQsIEsjISUpNkY9LiBnKigkaCN1NSAhaSMgIW4jayxdKEpBXSM3KjBIICF1IyEkZCMuICAheyNWPSYlcjgnKywgXiQpMUMkPCkuICAhJCRrNXM5bkF1NSAhKyQsICY2ICFpIzMvISUhJEQxLCB2RCxWYVkhJEE9LiAgIUQkYCAgICBgYFYkezosICElfCZdIyAhRiRvJW0jISRqIyAhTiQsIG08VTRdIyAhVCQyJWIkISRXLCAhRSMuIEMmPkk9RjYpLCBeJHcnLTs2JC4gVC1FI1cqISQkMF8pLCBDM2kjdC4hJGcyfUAuIHc5dzlIJl8pci9zO2pAJiUsIF0nQyRWLzQuJDBVJC4gRUZFRkgmXykgQFolbDRfJiwgZyluJF0ne0FAJi4gICFEJGAuLi4uLi5gYCAhXSQgIWMkYCAgICBgYEYseSogIWgkaCMoJGc9OmddIzYpICFwJEJZISRqIywgcC8gIXgkQjBfM10nSSQgIUUjbGk/PSwgICEhJXIxRSN8JSEkejVdKCwgazVVVzNBQiV4Mm5BLiAlPmpfb2VdIzYkQicsID9BbCx4OSEkRSNLPy4gICEqJX00eSo3JiEkWTRDTiwgMEFpJDYpISQ5JHwsLiA+Mi0kQCZCJVBeSkEsICEuMy8hJV0naSR+MS4gVi9DJGIlPy9mSG88LCA7JyBAazNdI2E/JiUuICAhRCRgLi4uLi4uYGAgIUQkYCAgICBgYHslNyQ2JEInISRXLCwgWy90KFonXSYsID8uei55KiEkJDBaJywgZDNFIzQ9XSc0NzUuLiB6PTYpaiMhJFY9JiUsIGgjbSNXLCEkMy8hJSwgRSdvPCEkXScxJU4qLCAgIXgkeiUgITAldD8gITglISQgIUAlXScgIUglZycgIVAldyggIUUjLCA1LiEkQyRSKUsmISRDJFpFLiBLM0w4Wy93LSEkOSRSKThIKiQsIF0neSpoIygkISQkMEcnMjRgLi4uLi4uLyM2NzQ0MkQvc2hha2UrNC5zaXplLTQyZXhzaXplKzIrNCxzaXplLmV4c2l6ZS1zaGFrZS5zaXplLTguc2l6ZStFQCRGRXZlbnRUZXN0OmFhYWJiYmNjY2RkZCluL3N3aW5nKzQtc3dpbmcvI0ZGMDAwMCx3YWl0LHBhZ2Uvc3BlZWQrMS9zcGVlZCsyLyNBQUZGMDAvc3BlZWQtOC1zcGVlZC8jMDBGRkNDLyMwMEFBNDQvI0FBQ0MwMC8jQUEwMEJCMSNGRkZGRkY1NSIpKQ0KDQpDYWxsIFRleHRCb3hfU3VibWl0KHMsIC0xKSAnIMzhvbuyu7T4zbfP8bXEttS7sL/yDQoA|AQAAAAAAAAAAAA
SU|%43|RGltIHMgQXMgc3RyaW5nID0gVFhUKEQoImBgfCYgIUUjICFNI2BUaGUgQ3V0dGluZyBSb29tIEZsb29yIGlzIGEgc2l0ZSBkZWRpY2F0ZWQgdG8gdW5lYXJ0aGluZyBhbmQgcmVzZWFyY2hpbmcgdW51c2VkIGFuZCBjdXQgY29udGVudCBmcm9tIHZpZGVvIGdhbWVzLiBGcm9tIGRlYnVnIG1lbnVzLCB0byB1bnVzZWQgbXVzaWMsIGdyYXBoaWNzLCBlbmVtaWVzLCBvciBsZXZlbHMsIG1hbnkgZ2FtZXMgaGF2ZSBjb250ZW50IG5ldmVyIG1lYW50IHRvIGJlIHNlZW4gYnkgYW55Ym9keSBidXQgdGhlIGRldmVsb3BlcnMgb3IgZXZlbiBtZWFudCBmb3IgZXZlcnlib2R5LCBidXQgY3V0IGR1ZSB0byB0aW1lL2J1ZGdldCBjb25zdHJhaW50cy4vIzAwMDAwMC9zcGVlZC05IikpDQoNCicgus0gQiDKx7K7zay1xM23z/ENCkNhbGwgVGV4dGJveF9TZXRBbmltRmFjT2Zmc2V0KDAsIDAuMDEpDQonILrNIEIgyseyu82stcTNt8/xDQpDYWxsIFRleHRib3hfU3RvcmVBdmF0YXIoNCwgMCwgMCwgMTI4LCAxMjgpDQpDYWxsIFRleHRib3hfU3RvcmVBdmF0YXJGcm9tU2hhcGUoNzAwLCAxMDAsIDAsIDApDQpDYWxsIFRleHRib3hfU3RvcmVBdmF0YXJTaGFwZSg2NjAsIDEwMCwgNDAsIDQwKQ0KQ2FsbCBUZXh0Ym94X1N0b3JlTXNnRnJvbVNoYXBlKDY1NSwgMTAwLCAwLCAwKQ0KQ2FsbCBUZXh0Ym94X1N0b3JlTXNnU2hhcGUoMTAwLCAxMDAsIDU1NSwgMTAwKQ0KDQpDYWxsIFRleHRCb3hfU3VibWl0KHMsIC0xKSAnILrNIEIgyseyu82stcTNt8/xAA|AQAAAAAAAAAAAA
SU|%44|RGltIHMgQXMgc3RyaW5nID0gVFhUKEQoImBgXicgIUUjZiRXJyEkICFNIyAhVSMgIV0jNjQsIEsjISUpNkY9LiBnKigkaCN1NSAhaSMgIW4jayxdKEpBXSM3KjBIICF1IyEkZCMuICAheyNWPSYlcjgnKywgXiQpMUMkPCkuICAhJCRrNXM5bkF1NSwgJjYgIWkjMy8hJSEkRDEsIHZELFZhWSEkQT0uICAhKyRgICAgIGBgViR7OiwgISV8Jl0jICEtJG8lbSMhJGojICE1JCwgbTxVNF0jICE7JDIlYiQhJFcsICFFIy4gQyY+ST1GNiksIF4kdyctOzYkLiBULUUjVyohJCQwXyksIEMzaSN0LiEkZzJ9QC4gdzl3OUgmXylyL3M7akAmJSwgXSdDJFYvNC4kMFUkLiBFRkVGSCZfKSBAWiVsNF8mLCBnKW4kXSd7QUAmLiAgISskYC4uLi4uLmBgICFDJCAhSCRgICAgIGBgRix5KiAhTSRoIygkZz06Z10jNikgIVUkQlkhJGojLCBwLyAhXiRCMF8zXSdJJCAhRSNsaT89LCAgIWckcjFFI3wlISR6NV0oLCBrNVVXM0FCJXgybkEuICU+al9vZV0jNiRCJywgP0FsLHg5ISRFI0s/LiAgIW8kfTR5KjcmISRZNENOLCAwQWkkNikhJDkkfCwuID4yLSRAJkIlUF5KQSwgIS4zLyElXSdpJH4xLiBWL0MkYiU/L2ZIbzwsIDsnIEBrM10jYT8mJS4gICErJGAuLi4uLi5gYCAhKyRgICAgIGBgeyU3JDYkQichJFcsLCBbL3QoWiddJiwgPy56LnkqISQkMFonLCBkM0UjND1dJzQ3NS4uIHo9NilqIyEkVj0mJSwgaCNtI1csISQzLyElLCBFJ288ISRdJzElTiosICAhXiR6JSAhdSR0PyAhfSQhJCAhJyVdJyAhLyVnJyAhNyV3KCAhRSMsIDUuISRDJFIpSyYhJEMkWkUuIEszTDhbL3ctISQ5JFIpOEgqJCwgXSd5KmgjKCQhJCQwRycyNGAuLi4uLi4vIzAwMDAwMC9zaGFrZSs0LnNpemUtNDJleHNpemUrMis0LHNpemUuZXhzaXplLXNoYWtlLnNpemUtOC5zaXplK0Upbi9zd2luZys0LXN3aW5nLyNGRjAwMDAsd2FpdCxwYWdlL3NwZWVkKzEvc3BlZWQrMi8jQUFGRjAwL3NwZWVkLTItc3BlZWQvIzAwRkZDQy8jMDBBQTQ0LyNBQUNDMDAvI0FBMDBCQjEjRkZGRkZGNTUiKSkNCg0KQ2FsbCBUZXh0Qm94X0NvbnRpbnVlKCkA|AQAAAAAAAAAAAA
SU|%45|RGltIHMgQXMgc3RyaW5nID0gVFhUKEQoImBgXicgIUUjZiRXJyEkICFNIyAhVSMgIV0jNjQsIEsjISUpNkY9LiBnKigkaCN1NSAhaSMgIW4jayxdKEpBXSM3KjBIICF1IyEkZCMuICAheyNWPSYlcjgnKywgXiQpMUMkPCkuICAhJCRrNXM5bkF1NSwgJjYgIWkjMy8hJSEkRDEsIHZELFZhWSEkQT0uICAhKyRgICAgIGBgViR7OiwgISV8Jl0jICEtJG8lbSMhJGojICE1JCwgbTxVNF0jICE7JDIlYiQhJFcsICFFIy4gQyY+ST1GNiksIF4kdyctOzYkLiBULUUjVyohJCQwXyksIEMzaSN0LiEkZzJ9QC4gdzl3OUgmXylyL3M7akAmJSwgXSdDJFYvNC4kMFUkLiBFRkVGSCZfKSBAWiVsNF8mLCBnKW4kXSd7QUAmLiAgISskYC4uLi4uLmBgICFDJCAhSCRgICAgIGBgRix5KiAhTSRoIygkZz06Z10jNikgIVUkQlkhJGojLCBwLyAhXiRCMF8zXSdJJCAhRSNsaT89LCAgIWckcjFFI3wlISR6NV0oLCBrNVVXM0FCJXgybkEuICU+al9vZV0jNiRCJywgP0FsLHg5ISRFI0s/LiAgIW8kfTR5KjcmISRZNENOLCAwQWkkNikhJDkkfCwuID4yLSRAJkIlUF5KQSwgIS4zLyElXSdpJH4xLiBWL0MkYiU/L2ZIbzwsIDsnIEBrM10jYT8mJS4gICErJGAuLi4uLi5gYCAhKyRgICAgIGBgeyU3JDYkQichJFcsLCBbL3QoWiddJiwgPy56LnkqISQkMFonLCBkM0UjND1dJzQ3NS4uIHo9NilqIyEkVj0mJSwgaCNtI1csISQzLyElLCBFJ288ISRdJzElTiosICAhXiR6JSAhdSR0PyAhfSQhJCAhJyVdJyAhLyVnJyAhNyV3KCAhRSMsIDUuISRDJFIpSyYhJEMkWkUuIEszTDhbL3ctISQ5JFIpOEgqJCwgXSd5KmgjKCQhJCQwRycyNGAuLi4uLi4vIzAwMDAwMC9zaGFrZSs0LnNpemUtNDJleHNpemUrMis0LHNpemUuZXhzaXplLXNoYWtlLnNpemUtOC5zaXplK0Upbi9zd2luZys0LXN3aW5nLyNGRjAwMDAsd2FpdCxwYWdlL3NwZWVkKzEvc3BlZWQrMi8jQUFGRjAwL3NwZWVkLTItc3BlZWQvIzAwRkZDQy8jMDBBQTQ0LyNBQUNDMDAvI0FBMDBCQjEjRkZGRkZGNTUiKSkNCg0KQ2FsbCBUZXh0Qm94X1N1Ym1pdCgiIiwgLTEpAA|AQAAAAAAAAAAAA
SU|%54%65%73%74%4C%69%74%65|ZGltIHMgYXMgbG9uZyA9IC01DQoNCicgwOAgYmFzZTkyILHgwuu1xM7Esb7X1rf7tK4NCkRJTSBhIEFTIFN0cmluZyA9IFRYVChEKCJgYFMjXitkOn0pZCMxMlNEXScgIUUjQyRMKHgraCtgKW4iKSkNCg0KJyDJ6NbDzsSxvr/yw6q14yAo1eLA78rH1/PPwr3HKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZUFuY2hvcigwLCAxKQ0KJyDJ6NbDzsSxvr/yzrvWwyjTw7nYv6jX+LHqz7UpDQpDYWxsIFRleHRib3hMaXRlX1N0b3JlUG9zKHN5c3ZhbChwbGF5ZXIxc2NyeCkgKyAxMDAgKiBybmQsIHN5c3ZhbChwbGF5ZXIxc2NyeSkgKyAxMDAgKiBybmQpDQonIMno1sPOxLG+v/LX7rTzv+22yCi437bIyse4+b7dzsTX1tfUysrTprXELCDO3reoyta2r8no1sMpDQpDYWxsIFRleHRib3hMaXRlX1N0b3JlV2lkdGgoMTAwICsgcykNCicgyejWw87E19a089ChKDAgzqrErMjPtPPQoSkNCkNhbGwgVGV4dGJveExpdGVfU3RvcmVTaXplKDApDQpzICs9IDEwDQoNCicgyejWw87Esb6/8tekwfTKsbzkICjV4sDvyscgNDgwINahKSwgyrG85L3hyvi687vh19S2r8/6u9kNCkNhbGwgVGV4dGJveExpdGVfU3RvcmVUaW1lKDQ4MCkNCicgzOG9u87Esb61vc7Esb6/8s+1zbMgKM7Esb648cq9zqogYmFzZTkyILHgwussIM7Esb7M4b27uvO74cflv9XJz8PmtcTJ6NbDz+7OqsSsyM/WtSkNCicgz8K0zszhvbvHsNKq1tjQwsno1sPJ6NbDz+4NCidDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KDQonINXiwO/W2NDCyejWw8no1sPP7iBiYWxhYmFsYWFhYaGtoa0NCkNhbGwgVGV4dGJveExpdGVfU3RvcmVBbmNob3IoMCwgMSkNCkNhbGwgVGV4dGJveExpdGVfU3RvcmVQb3Moc3lzdmFsKHBsYXllcjFzY3J4KSArIDIwMCAqIHJuZCwgc3lzdmFsKHBsYXllcjFzY3J5KSArIDIwMCAqIHJuZCkNCkNhbGwgVGV4dGJveExpdGVfU3RvcmVXaWR0aCgxMDAgKyBzKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVNpemUoMCkNCnMgKz0gMTANCkNhbGwgVGV4dGJveExpdGVfU3RvcmVUaW1lKDM0MCkNCidDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKSAnINTZzOG9u9K7zPUNCicg1+624M2syrG05tTaICA4IMz1zsSxvr/yLCDI9NLRvq205tTaIDggzPXOxLG+v/LKsSwg09bM4b27wcvSu8z1LCDQwsC0tcTOxLG+v/K74bDRvsm1xLy3tfQNCg0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZUFuY2hvcigwLCAxKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZU9mZnNldCgwLCAwKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVBvcyhzeXN2YWwocGxheWVyMXNjcngpICsgNDAwICogcm5kLCBzeXN2YWwocGxheWVyMXNjcnkpICsgNDAwICogcm5kKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVdpZHRoKDEwMCArIHMpDQonQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVNpemUoMCkNCnMgKz0gMTANCg0KJyC4+svmzea80iAxILXEzsSxvr/y16TB9MqxvOTOqiAxMDAwINahDQpDYWxsIFRleHRib3hMaXRlX1N0b3JlVGltZSgxMDApDQonIMzhvbu4+svmtcS21M/zIDE6ILbUz/MgaWQsIDM6ILj6y+bA4NDNo6zV4sDvtcQgMyDOqrj6y+YgY2hhcg0KJyDV4sDvv8nS1Mno1sPOxLG+v/K4+svmDQonIMno1sPBy7jDz+4sIM7Esb6/8rXEzrvWw77Nu+HW8Nahy6LQwiwguPrL5sS/seq21M/zDQonINXiwO/M7sHLIDEsIDMsINLizqq4+svmIGlkIM6qIDEgwODQzc6qIDMgtcS21M/zo6jV4sDvyse4+svmzea80iAxILXE1/ix6qOpDQpDYWxsIFRleHRib3hMaXRlX1N0b3JlVGFyZ2V0SWQoMSwgMykNCicgzOG9u7bUu7C/8s7Esb4NCkNhbGwgVGV4dGJveExpdGVfU3VibWl0KGEpDQoNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCg0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVBbmNob3IoMCwgMSkNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlUG9zKHN5c3ZhbChwbGF5ZXIxc2NyeCkgKyA0MDAgKiBybmQsIHN5c3ZhbChwbGF5ZXIxc2NyeSkgKyA0MDAgKiBybmQpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVdpZHRoKDEwMCArIHMgKiBybmQpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVNpemUoMTAgKiBybmQpDQoJcyArPSAxMA0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVUaW1lKDYwKQ0KDQoJJyDU2tK7uPbRrbu31tCyu7bPzOG9u7bUu7C/8qOsu+Gw0b3P1OfM4b27tcS21Luwv/K8t7X0DQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVRhcmdldElkKDEsIDMpDQpDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlQW5jaG9yKDAsIDEpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVBvcyhzeXN2YWwocGxheWVyMXNjcngpICsgNDAwICogcm5kLCBzeXN2YWwocGxheWVyMXNjcnkpICsgNDAwICogcm5kKQ0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVXaWR0aCgxMDAgKyBzICogcm5kKQ0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVTaXplKDEwICogcm5kKQ0KCXMgKz0gMTANCglDYWxsIFRleHRib3hMaXRlX1N0b3JlVGltZSgxMDApDQoNCgknINTa0ru49tGtu7fW0LK7ts/M4b27ttS7sL/yo6y74bDRvc/U58zhvbu1xLbUu7C/8ry3tfQNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlVGFyZ2V0SWQoMSwgMykNCglDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KCQ0KCQlDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCQlDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCgkJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJDQoJJ2NhbGwgX19yZW1vdmVJZHgoMikNCgkNCgkJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCgkNCgkJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZUFuY2hvcigwLCAxKQ0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVQb3Moc3lzdmFsKHBsYXllcjFzY3J4KSArIDQwMCAqIHJuZCwgc3lzdmFsKHBsYXllcjFzY3J5KSArIDQwMCAqIHJuZCkNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlV2lkdGgoMTAwICsgcyAqIHJuZCkNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlU2l6ZSgxMCAqIHJuZCkNCglzICs9IDEwDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVRpbWUoNjApDQoNCgknINTa0ru49tGtu7fW0LK7ts/M4b27ttS7sL/yo6y74bDRvc/U58zhvbu1xLbUu7C/8ry3tfQNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlVGFyZ2V0SWQoMSwgMykNCglDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KDQpEbw0KCScg1eLA78O/IDEyINahzOG9u9K7uPbQwrXEzsSxvr/yLCCy4srUzsSxvr/yzOG9u8LfvK21xL2h17PQ1A0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVBbmNob3IoMCwgMSkNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlUG9zKHN5c3ZhbChwbGF5ZXIxc2NyeCkgKyA0MDAgKiBybmQsIHN5c3ZhbChwbGF5ZXIxc2NyeSkgKyA0MDAgKiBybmQpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVdpZHRoKDEwMCArIHMgKiBybmQpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVNpemUoMTAgKiBybmQpDQoJcyArPSAxMA0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVUaW1lKDEwMDApDQoNCgknINTa0ru49tGtu7fW0LK7ts/M4b27ttS7sL/yo6y74bDRvc/U58zhvbu1xLbUu7C/8ry3tfQNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlVGFyZ2V0SWQoMSwgMykNCglDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KCQ0KCScgtci0/SAxMiDWoQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KTG9vcA0KAA|AQB8AAAAAAAAAA
SU|%46%45%76%65%6E%74%54%65%73%74|Q2FsbCBzaG93TXNnKFRleHRib3hfR2V0RXZlbnRJbmZvKCkpDQoA|AQAAAAAAAAAAAA
SU|%43%68%61%6E%67%65%49%63%6F%6E|Q2FsbCBUZXh0Ym94X1NldEF2YXRhckltbSgzMDgsIDEyOCwgMTkyLCA2NCwgNjQpDQoA|AQAAAAAAAAAAAA
SU|%53%61%6D%70%6C%65|J1NjcmlwdCBOby4xMSBOYW1lOk5ldyBTY3JpcHQNCidEaW0gcyBBcyBzdHJpbmcgPSBUWFQoRCgiYGBXIyAhRSMzOCwgICFNIyAhUiN1KHYjNjVjKXkvRSM2JDM4YCEvIzAwMDAwMCx3YWl0L3NwZWVkLTQiKSkNCkRpbSBzIEFzIHN0cmluZw0KRGltIGNvbnQgYXMgaW50ZWdlcg0KRGltIHByZXNzZWQgYXMgaW50ZWdlcg0KRGltIGVuZGQgYXMgaW50ZWdlcg0KRGltIE1zZ3Byb2dyZXNzIGFzIGludGVnZXINCkRpbSB3YWl0IGFzIGludGVnZXINCkRpbSBjb250ZW50IGFzIGludGVnZXINCg0KRGltIF9fc291bmRubyBBcyBJbnRlZ2VyID0gMCAn0vTQp0lEDQpEaW0gX19zb3VuZG5hbWUgQXMgU3RyaW5nID0gIiIgJ9L00KfD+9fWDQoNCifJ6NbD0vTQpw0KJ0BwYXJhbSBzbjog0vTQp0lEDQonQHBhcmFtIHNuYW1lIDog0vTQp8P719YNClNjcmlwdCBUZXh0Ym94X1NldHNvdW5kKHNuIGFzIGludGVnZXIsIHNuYW1lIGFzIHN0cmluZykNCiAgICBfX3NvdW5kbm8gPSBzbg0KICAgIF9fc291bmRuYW1lID0gc25hbWUgDQoJSWYgc25hbWUgPD4gIiIgdGhlbg0KCQlDYWxsIEF1ZGlvc2V0KDEsX19zb3VuZG5vLDAsX19zb3VuZG5hbWUpDQoJRW5kIElmDQpFbmQgU2NyaXB0DQoNCkV4cG9ydCBTY3JpcHQgR2V0U291bmQocmV0dXJuIGludGVnZXIpDQoJcmV0dXJuIF9fc291bmRubw0KRW5kIFNjcmlwdA0KDQpEbw0KICAgIFNlbGVjdCBDYXNlIE1zZ3Byb2dyZXNzDQogICAgQ2FzZSAwDQogICAgICAgIElmIGNvbnQgPSAwIHRoZW4NCiAgICAgICAgICAgICcgzbfP8Q0KICAgICAgICAgICAgcyA9IFRYVChEKCJgYHAjICFFIyAhTSNgSSBjYW4gZWF0IGdsYXNzLCBpdCBkb2Vzbid0IGh1cnQgbWUuL3NwZWVkLTQxIzAwMDAwMGZmIikpDQogICAgICAgICAgICBDYWxsIFRleHRib3hfU2V0c291bmQoMTAwLCAiTHVpZ2lzb3VuZC53YXYiKQ0KICAgICAgICAgICAgQ2FsbCBUZXh0Ym94X1N0b3JlQXZhdGFyKDMwOCwgMCwgMTkyLCA2NCwgNjQpDQogICAgICAgICAgICBDYWxsIFRleHRib3hfU3RvcmVBdmF0YXJTaGFwZSg4MiwgMTAwLCA2NCwgNjQpDQogICAgICAgICAgICBDYWxsIFRleHRib3hfU3RvcmVBdmF0YXJGcm9tU2hhcGUoODIsIDEwMCwgNjQsMCkNCiAgICAgICAgICAgIENhbGwgVGV4dGJveF9TdG9yZU1zZ1NoYXBlKDE0NCwgMTAwLCA1NTYsIDUwKQ0KICAgICAgICAgICAgQ2FsbCBUZXh0Ym94X1N0b3JlTXNnRnJvbVNoYXBlKDE0NCwgMTAwLCA1NTYsIDApDQogICAgICAgICAgICBDYWxsIFRleHRCb3hfU3VibWl0KHMsIC0xKSAnIMzhvbu0+M23z/G1xLbUu7C/8g0KICAgICAgICBFbmQgaWYNCiAgICBDYXNlIDENCiAgICAgICAgSWYgY29udCA9IDAgdGhlbg0KICAgICAgICAgICAgJyDNt8/xDQogICAgICAgICAgICBzID0gVFhUKEQoImBgMSQgIUUjICFNI0szMzhKfiAhVSMgIV4jICAgIWgjUicgIU0jKiRtLFonayR2I2Q6USRhL2wleS9YJCgkdyptQD4wVSNKfiAhVSMgIV4jICAgIWgjZDMgIU0jJTYsICAhVSMgIEI1ICFNI1tCbDVNLE03eS9YJCgkWicgLzkkODsgIW8jYC4uLi4uLi8jMDAwMDAwL3NwZWVkLTQvc3BlZWQtOTBleHNpemUtNi5leHNpemUtc3BlZWQiKSkNCiAgICAgICAgICAgIENhbGwgVGV4dGJveF9TZXRzb3VuZCgxMDEsICJNYXJpb3NvdW5kLndhdiIpDQogICAgICAgICAgICBDYWxsIFRleHRib3hfU3RvcmVBdmF0YXIoMzA4LCAwLCA2NCwgNjQsIDY0KQ0KICAgICAgICAgICAgQ2FsbCBUZXh0Ym94X1N0b3JlQXZhdGFyRnJvbVNoYXBlKDcxOCwgMTAwLCAtNjQsIDApDQogICAgICAgICAgICBDYWxsIFRleHRib3hfU3RvcmVBdmF0YXJTaGFwZSg3MTgsIDEwMCwgLTY0LCA2NCkNCiAgICAgICAgICAgIENhbGwgVGV4dGJveF9TdG9yZU1zZ1NoYXBlKDEwMCwgMTAwLCA1NTYsIDc2KQ0KICAgICAgICAgICAgQ2FsbCBUZXh0Ym94X1N0b3JlTXNnRnJvbVNoYXBlKDEwMCwgMTAwLCA1NTYsIDApDQogICAgICAgICAgICBDYWxsIFRleHRCb3hfU3VibWl0KHMsIC0xKSAnIMzhvbu0+M23z/G1xLbUu7C/8g0KICAgICAgICBFbmQgaWYNCiAgICBDYXNlIDINCiAgICAgICAgSWYgY29udCA9IDAgdGhlbg0KICAgICAgICAgICAgJyDNt8/xDQogICAgICAgICAgICBzID0gVFhUKEQoImBgMyYgIUUjICFNI2BCVVBCVVBgYCAhVSMhICAhWyMgIWIjICFnIyAhaSMgIXAjYEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUEJVUC8jMDAwMDAwL3NwZWVkLTQtc3BlZWQsd2FpdCxwYWdlKW4uc2l6ZSs4L3NoYWtlKzQiKSkNCiAgICAgICAgICAgIENhbGwgVGV4dGJveF9TZXRzb3VuZCgxMDIsICJUb2Fkc291bmQud2F2IikNCiAgICAgICAgICAgIENhbGwgVGV4dGJveF9TdG9yZUF2YXRhcigzMDgsIDEyOCwgNDQ4LCA2NCwgNjQpDQogICAgICAgICAgICBDYWxsIFRleHRib3hfU3RvcmVBdmF0YXJTaGFwZSg4MiwgMTAwLCA2NCwgNjQpDQogICAgICAgICAgICBDYWxsIFRleHRib3hfU3RvcmVBdmF0YXJGcm9tU2hhcGUoODIsIDEwMCwgNjQsMCkNCiAgICAgICAgICAgIENhbGwgVGV4dGJveF9TdG9yZU1zZ1NoYXBlKDE0NCwgMTAwLCA1NTYsIDc2KQ0KICAgICAgICAgICAgQ2FsbCBUZXh0Ym94X1N0b3JlTXNnRnJvbVNoYXBlKDE0NCwgMTAwLCA1NTYsIDApDQogICAgICAgICAgICBDYWxsIFRleHRCb3hfU3VibWl0KHMsIC0xKSAnIMzhvbu0+M23z/G1xLbUu7C/8g0KICAgICAgICBFbmQgaWYNCiAgICBFbmQgU2VsZWN0DQoJDQogICAgY29udCArPSAxDQoJY29udGVudCArPSAxDQogICAgSWYga2V5cHJlc3MoLTE2KSBhbmQgcHJlc3NlZCA9IDAgYW5kIGNvbnRlbnQgPj0gMiB0aGVuICfM+Ln9ttS7sA0KICAgICAgICBJZiBUZXh0Ym94X2lzZW5kKCkgdGhlbiAnyOe5+7bUu7C809TYzeqxzw0KCQkJY29udCA9IDANCiAgICAgICAgICAgIElmIE1zZ3Byb2dyZXNzID0gMiB0aGVuDQogICAgICAgICAgICAgICAgQ2FsbCBUZXh0Qm94X1N1Ym1pdCgiIiwgLTEpDQogICAgICAgICAgICBFbmQgaWYNCgkJCWNvbnRlbnQgPSAwDQogICAgICAgICAgICBNc2dwcm9ncmVzcyArPSAxDQogICAgICAgIEVuZCBJZg0KICAgICAgICBJZiBUZXh0Ym94X2lzd2FpdCgpIDw+IDAgdGhlbiAnt63Ss7XEx+m/9g0KICAgICAgICAgICAgU2VsZWN0IENhc2UgTXNncHJvZ3Jlc3MNCiAgICAgICAgICAgIENhc2UgMg0KICAgICAgICAgICAgICAgIENhbGwgVGV4dGJveF9TZXRBdmF0YXJJbW0oMzA4LCAwLCA0NDgsIDY0LCA2NCkgJ8fQu7vKtcD9DQogICAgICAgICAgICAgICAgQ2FsbCBUZXh0Qm94X0NvbnRpbnVlKCkNCiAgICAgICAgICAgICAgICBjb250ID0gMQ0KICAgICAgICAgICAgRW5kIFNlbGVjdA0KICAgICAgICBFbHNlDQogICAgICAgICAgICBDYWxsIFRleHRib3hfRHJhd1RvV2FpdCgpDQogICAgICAgIEVuZCBJZg0KICAgIEVuZCBpZg0KCQ0KICAgIElmIGtleXByZXNzKC0xNikgdGhlbg0KICAgICAgICBwcmVzc2VkID0gMQ0KICAgIEVsc2UNCiAgICAgICAgcHJlc3NlZCA9IDANCiAgICBFbmQgaWYNCgkNCiAgICBDYWxsIFNsZWVwKDEpDQpMb29wDQoA|AQAbAAAAAAAAAA
SU|%46%42%6F%78%45%76%65%6E%74|DQoNCmlmIFRleHRib3hFdmVudF9Pbk5leHQoKSBUaGVuDQoJQ2FsbCBBdWRpb3NldCgyLEdldFNvdW5kKCksMCwiIikNCkVuZCBJZg0KDQonSWYgVGV4dGJveEV2ZW50X09uQ2hhbmdlQm94KCkgVGhlbg0KJwlDYWxsIHNob3dNc2coIk9uQ2hhbmdlQm94IikNCidFbmQgSWYNCidDYWxsIHNob3dNc2coIiIgJiBBc2NXKFRleHRib3hFdmVudF9HZXRWYWx1ZSgpKSApAA|AQAAAAAAAAAAAA
CT|1|0001800,0002600
