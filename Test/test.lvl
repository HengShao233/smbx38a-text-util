SMBXFile69
A|0||||,,,
BTNS|Mario|Luigi|Peach|Toad|Link
P1|-199912|-200086
M|1|-200000|-200600|800|600|0|0|0|0|0|0|0|0,-1|
M|2|-180000|-180600|800|600|0|0|0|0|0|0|0|0,-1|
M|3|-160000|-160600|800|600|0|0|0|0|0|0|0|0,-1|
M|4|-140000|-140600|800|600|0|0|0|0|0|0|0|0,-1|
M|5|-120000|-120600|800|600|0|0|0|0|0|0|0|0,-1|
M|6|-100000|-100600|800|600|0|0|0|0|0|0|0|0,-1|
M|7|-80000|-80600|800|600|0|0|0|0|0|0|0|0,-1|
M|8|-60000|-60600|800|600|0|0|0|0|0|0|0|0,-1|
M|9|-40000|-40600|800|600|0|0|0|0|0|0|0|0,-1|
M|10|-20000|-20600|800|600|0|0|0|0|0|0|0|0,-1|
M|11|0|-600|800|600|0|0|0|0|0|0|0|0,-1|
M|12|20000|19400|800|600|0|0|0|0|0|0|0|0,-1|
M|13|40000|39400|800|600|0|0|0|0|0|0|0|0,-1|
M|14|60000|59400|800|600|0|0|0|0|0|0|0|0,-1|
M|15|80000|79400|800|600|0|0|0|0|0|0|0|0,-1|
M|16|100000|99400|800|600|0|0|0|0|0|0|0|0,-1|
M|17|120000|119400|800|600|0|0|0|0|0|0|0|0,-1|
M|18|140000|139400|800|600|0|0|0|0|0|0|0|0,-1|
M|19|160000|159400|800|600|0|0|0|0|0|0|0|0,-1|
M|20|180000|179400|800|600|0|0|0|0|0|0|0|0,-1|
M|21|200000|199400|800|600|0|0|0|0|0|0|0|0,-1|
B||1|-200000|-200032||0|0||32|32
B||115|-200000|-200000||0|0||32|32
B||1|-199968|-200032||0|0||32|32
B||115|-199968|-200000||0|0||32|32
B||1|-199936|-200032||0|0||32|32
B||115|-199936|-200000||0|0||32|32
B||281|-199904|-200096||0|0|,%41,,|32|32
B||1|-199904|-200032||0|0||32|32
B||115|-199904|-200000||0|0||32|32
B||1|-199872|-200032||0|0||32|32
B||115|-199872|-200000||0|0||32|32
B||1|-199840|-200032||0|0||32|32
B||115|-199840|-200000||0|0||32|32
B||281|-199808|-200096||0|0|,%42,,|32|32
B||1|-199808|-200032||0|0||32|32
B||115|-199808|-200000||0|0||32|32
B||1|-199776|-200032||0|0||32|32
B||115|-199776|-200000||0|0||32|32
B||1|-199744|-200032||0|0||32|32
B||115|-199744|-200000||0|0||32|32
B||281|-199712|-200096||0|0|,%43,,|32|32
B||1|-199712|-200032||0|0||32|32
B||115|-199712|-200000||0|0||32|32
B||1|-199680|-200032||0|0||32|32
B||115|-199680|-200000||0|0||32|32
B||1|-199648|-200032||0|0||32|32
B||115|-199648|-200000||0|0||32|32
B||281|-199616|-200096||0|0|,%44,,|32|32
B||1|-199616|-200032||0|0||32|32
B||115|-199616|-200000||0|0||32|32
B||1|-199584|-200032||0|0||32|32
B||115|-199584|-200000||0|0||32|32
B||1|-199552|-200032||0|0||32|32
B||115|-199552|-200000||0|0||32|32
B|,%45|281|-199520|-200096||0|0|,%45,,|32|32
B||1|-199520|-200032||0|0||32|32
B||115|-199520|-200000||0|0||32|32
B||1|-199488|-200032||0|0||32|32
B||115|-199488|-200000||0|0||32|32
B||1|-199456|-200032||0|0||32|32
B||115|-199456|-200000||0|0||32|32
B||1|-199424|-200032||0|0||32|32
B||115|-199424|-200000||0|0||32|32
B||1|-199392|-200032||0|0||32|32
B||115|-199392|-200000||0|0||32|32
B||1|-199360|-200032||0|0||32|32
B||115|-199360|-200000||0|0||32|32
B|,%45|281|-199328|-200096||0|0|,%54%65%73%74%4C%69%74%65,,|32|32
B||1|-199328|-200032||0|0||32|32
B||115|-199328|-200000||0|0||32|32
B||1|-199296|-200032||0|0||32|32
B||115|-199296|-200000||0|0||32|32
B||1|-199264|-200032||0|0||32|32
B||115|-199264|-200000||0|0||32|32
B||1|-199232|-200032||0|0||32|32
B||115|-199232|-200000||0|0||32|32
T||1|-200000|-200600
L|%44%65%66%61%75%6C%74|1
L|%44%65%73%74%72%6F%79%65%64%20%42%6C%6F%63%6B%73|0
L|%53%70%61%77%6E%65%64%20%4E%50%43%73|1
E|%4C%65%76%65%6C%20%2D%20%53%74%61%72%74||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/3
E|%50%20%53%77%69%74%63%68%20%2D%20%53%74%61%72%74||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0
E|%50%20%53%77%69%74%63%68%20%2D%20%45%6E%64||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0
E|%54%65%78%74%55%74%69%6C||1,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%54%65%78%74%44%72%61%77%55%74%69%6C
E|%54%65%78%74%42%6F%78%55%74%69%6C||1,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%54%65%78%74%42%6F%78
E|%42||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%42
E|%41||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%41
E|%43||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%43
E|%44||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%44
E|%45||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%45
E|%54%65%73%74%4C%69%74%65||0,|0///||0,0,0,0,0,0,0,0,0,0,0,0|//|0/0|||,0/0,0,0,0,0/0/%54%65%73%74%4C%69%74%65
V|%56|0|0
V|%56%32|0|0
V|%56%53%74%72|0|0
SU|%44%65%63%6F%64%65%72||AQDrAAAAAAAAAA
SU|%54%65%78%74%42%6F%78||AQAbAAAAAAAAAA
SU|%42|RGltIHMgQXMgc3RyaW5nID0gVFhUKEQoImBgYScgIUUjZiRXJyEkICFNIyAhVSMgIV0jNjQsIEsjISUpNkY9LiBnKigkaCN1NSAhaSMgIW4jayxdKEpBXSM3KjBIICF1IyEkZCMuICAheyNWPSYlcjgnKywgXiQpMUMkPCkuICAhJCRrNXM5bkF1NSAhKyQsICY2ICFpIzMvISUhJEQxLCB2RCxWYVkhJEE9LiAgIUQkYCAgICBgYFYkezosICElfCZdIyAhRiRvJW0jISRqIyAhTiQsIG08VTRdIyAhVCQyJWIkISRXLCAhRSMuIEMmPkk9RjYpLCBeJHcnLTs2JC4gVC1FI1cqISQkMF8pLCBDM2kjdC4hJGcyfUAuIHc5dzlIJl8pci9zO2pAJiUsIF0nQyRWLzQuJDBVJC4gRUZFRkgmXykgQFolbDRfJiwgZyluJF0ne0FAJi4gICFEJGAuLi4uLi5gYCAhXSQgIWMkYCAgICBgYEYseSogIWgkaCMoJGc9OmddIzYpICFwJEJZISRqIywgcC8gIXgkQjBfM10nSSQgIUUjbGk/PSwgICEhJXIxRSN8JSEkejVdKCwgazVVVzNBQiV4Mm5BLiAlPmpfb2VdIzYkQicsID9BbCx4OSEkRSNLPy4gICEqJX00eSo3JiEkWTRDTiwgMEFpJDYpISQ5JHwsLiA+Mi0kQCZCJVBeSkEsICEuMy8hJV0naSR+MS4gVi9DJGIlPy9mSG88LCA7JyBAazNdI2E/JiUuICAhRCRgLi4uLi4uYGAgIUQkYCAgICBgYHslNyQ2JEInISRXLCwgWy90KFonXSYsID8uei55KiEkJDBaJywgZDNFIzQ9XSc0NzUuLiB6PTYpaiMhJFY9JiUsIGgjbSNXLCEkMy8hJSwgRSdvPCEkXScxJU4qLCAgIXgkeiUgITAldD8gITglISQgIUAlXScgIUglZycgIVAldyggIUUjLCA1LiEkQyRSKUsmISRDJFpFLiBLM0w4Wy93LSEkOSRSKThIKiQsIF0neSpoIygkISQkMEcnMjRgLi4uLi4uLyMwMDAwMDAvc2hha2UrNC5zaXplLTQyZXhzaXplKzIrNCxzaXplLmV4c2l6ZS1zaGFrZS5zaXplLTguc2l6ZStFQCRGRXZlbnRUZXN0OmFhYWJiYmNjY2RkZCluL3N3aW5nKzQtc3dpbmcvI0ZGMDAwMCx3YWl0LHBhZ2Uvc3BlZWQrMS9zcGVlZCsyLyNBQUZGMDAvc3BlZWQtMi1zcGVlZC8jMDBGRkNDLyMwMEFBNDQvI0FBQ0MwMC8jQUEwMEJCMSNGRkZGRkY1NSIpKQ0KDQonIM23z/ENCkNhbGwgVGV4dGJveF9TdG9yZUF2YXRhcigzLCAwLCAwLCAxMjgsIDEyOCkNCkNhbGwgVGV4dGJveF9TdG9yZUF2YXRhclNoYXBlKDEwMCwgMTAwLCA0MCwgNDApDQpDYWxsIFRleHRib3hfU3RvcmVBdmF0YXJGcm9tU2hhcGUoMTAwLCAxMDAsIDAsMCkNCkNhbGwgVGV4dGJveF9TdG9yZU1zZ1NoYXBlKDE0NSwgMTAwLCA1NTUsIDEwMCkNCkNhbGwgVGV4dGJveF9TdG9yZU1zZ0Zyb21TaGFwZSgxNDUsIDEwMCwgMCwgMCkNCg0KQ2FsbCBUZXh0Qm94X1N1Ym1pdChzLCAtMSkgJyDM4b27tPjNt8/xtcS21Luwv/IA|AQAAAAAAAAAAAA
SU|%41|RGltIHMgQXMgc3RyaW5nID0gVFhUKEQoImBgYScgIUUjZiRXJyEkICFNIyAhVSMgIV0jNjQsIEsjISUpNkY9LiBnKigkaCN1NSAhaSMgIW4jayxdKEpBXSM3KjBIICF1IyEkZCMuICAheyNWPSYlcjgnKywgXiQpMUMkPCkuICAhJCRrNXM5bkF1NSAhKyQsICY2ICFpIzMvISUhJEQxLCB2RCxWYVkhJEE9LiAgIUQkYCAgICBgYFYkezosICElfCZdIyAhRiRvJW0jISRqIyAhTiQsIG08VTRdIyAhVCQyJWIkISRXLCAhRSMuIEMmPkk9RjYpLCBeJHcnLTs2JC4gVC1FI1cqISQkMF8pLCBDM2kjdC4hJGcyfUAuIHc5dzlIJl8pci9zO2pAJiUsIF0nQyRWLzQuJDBVJC4gRUZFRkgmXykgQFolbDRfJiwgZyluJF0ne0FAJi4gICFEJGAuLi4uLi5gYCAhXSQgIWMkYCAgICBgYEYseSogIWgkaCMoJGc9OmddIzYpICFwJEJZISRqIywgcC8gIXgkQjBfM10nSSQgIUUjbGk/PSwgICEhJXIxRSN8JSEkejVdKCwgazVVVzNBQiV4Mm5BLiAlPmpfb2VdIzYkQicsID9BbCx4OSEkRSNLPy4gICEqJX00eSo3JiEkWTRDTiwgMEFpJDYpISQ5JHwsLiA+Mi0kQCZCJVBeSkEsICEuMy8hJV0naSR+MS4gVi9DJGIlPy9mSG88LCA7JyBAazNdI2E/JiUuICAhRCRgLi4uLi4uYGAgIUQkYCAgICBgYHslNyQ2JEInISRXLCwgWy90KFonXSYsID8uei55KiEkJDBaJywgZDNFIzQ9XSc0NzUuLiB6PTYpaiMhJFY9JiUsIGgjbSNXLCEkMy8hJSwgRSdvPCEkXScxJU4qLCAgIXgkeiUgITAldD8gITglISQgIUAlXScgIUglZycgIVAldyggIUUjLCA1LiEkQyRSKUsmISRDJFpFLiBLM0w4Wy93LSEkOSRSKThIKiQsIF0neSpoIygkISQkMEcnMjRgLi4uLi4uLyM2NzQ0MkQvc2hha2UrNC5zaXplLTQyZXhzaXplKzIrNCxzaXplLmV4c2l6ZS1zaGFrZS5zaXplLTguc2l6ZStFQCRGRXZlbnRUZXN0OmFhYWJiYmNjY2RkZCluL3N3aW5nKzQtc3dpbmcvI0ZGMDAwMCx3YWl0LHBhZ2Uvc3BlZWQrMS9zcGVlZCsyLyNBQUZGMDAvc3BlZWQtMi1zcGVlZC8jMDBGRkNDLyMwMEFBNDQvI0FBQ0MwMC8jQUEwMEJCMSNGRkZGRkY1NSIpKQ0KDQpDYWxsIFRleHRCb3hfU3VibWl0KHMsIC0xKSAnIMzhvbuyu7T4zbfP8bXEttS7sL/yDQoA|AQAAAAAAAAAAAA
SU|%43|RGltIHMgQXMgc3RyaW5nID0gVFhUKEQoImBgXicgIUUjZiRXJyEkICFNIyAhVSMgIV0jNjQsIEsjISUpNkY9LiBnKigkaCN1NSAhaSMgIW4jayxdKEpBXSM3KjBIICF1IyEkZCMuICAheyNWPSYlcjgnKywgXiQpMUMkPCkuICAhJCRrNXM5bkF1NSwgJjYgIWkjMy8hJSEkRDEsIHZELFZhWSEkQT0uICAhKyRgICAgIGBgViR7OiwgISV8Jl0jICEtJG8lbSMhJGojICE1JCwgbTxVNF0jICE7JDIlYiQhJFcsICFFIy4gQyY+ST1GNiksIF4kdyctOzYkLiBULUUjVyohJCQwXyksIEMzaSN0LiEkZzJ9QC4gdzl3OUgmXylyL3M7akAmJSwgXSdDJFYvNC4kMFUkLiBFRkVGSCZfKSBAWiVsNF8mLCBnKW4kXSd7QUAmLiAgISskYC4uLi4uLmBgICFDJCAhSCRgICAgIGBgRix5KiAhTSRoIygkZz06Z10jNikgIVUkQlkhJGojLCBwLyAhXiRCMF8zXSdJJCAhRSNsaT89LCAgIWckcjFFI3wlISR6NV0oLCBrNVVXM0FCJXgybkEuICU+al9vZV0jNiRCJywgP0FsLHg5ISRFI0s/LiAgIW8kfTR5KjcmISRZNENOLCAwQWkkNikhJDkkfCwuID4yLSRAJkIlUF5KQSwgIS4zLyElXSdpJH4xLiBWL0MkYiU/L2ZIbzwsIDsnIEBrM10jYT8mJS4gICErJGAuLi4uLi5gYCAhKyRgICAgIGBgeyU3JDYkQichJFcsLCBbL3QoWiddJiwgPy56LnkqISQkMFonLCBkM0UjND1dJzQ3NS4uIHo9NilqIyEkVj0mJSwgaCNtI1csISQzLyElLCBFJ288ISRdJzElTiosICAhXiR6JSAhdSR0PyAhfSQhJCAhJyVdJyAhLyVnJyAhNyV3KCAhRSMsIDUuISRDJFIpSyYhJEMkWkUuIEszTDhbL3ctISQ5JFIpOEgqJCwgXSd5KmgjKCQhJCQwRycyNGAuLi4uLi4vIzAwMDAwMC9zaGFrZSs0LnNpemUtNDJleHNpemUrMis0LHNpemUuZXhzaXplLXNoYWtlLnNpemUtOC5zaXplK0Upbi9zd2luZys0LXN3aW5nLyNGRjAwMDAsd2FpdCxwYWdlL3NwZWVkKzEvc3BlZWQrMi8jQUFGRjAwL3NwZWVkLTItc3BlZWQvIzAwRkZDQy8jMDBBQTQ0LyNBQUNDMDAvI0FBMDBCQjEjRkZGRkZGNTUiKSkNCg0KJyC6zSBCIMrHsrvNrLXEzbfP8Q0KQ2FsbCBUZXh0Ym94X1N0b3JlQXZhdGFyKDQsIDAsIDAsIDEyOCwgMTI4KQ0KQ2FsbCBUZXh0Ym94X1N0b3JlQXZhdGFyRnJvbVNoYXBlKDcwMCwgMTAwLCAwLCAwKQ0KQ2FsbCBUZXh0Ym94X1N0b3JlQXZhdGFyU2hhcGUoNjYwLCAxMDAsIDQwLCA0MCkNCkNhbGwgVGV4dGJveF9TdG9yZU1zZ0Zyb21TaGFwZSg2NTUsIDEwMCwgMCwgMCkNCkNhbGwgVGV4dGJveF9TdG9yZU1zZ1NoYXBlKDEwMCwgMTAwLCA1NTUsIDEwMCkNCg0KQ2FsbCBUZXh0Qm94X1N1Ym1pdChzLCAtMSkgJyC6zSBCIMrHsrvNrLXEzbfP8QA|AQAAAAAAAAAAAA
SU|%44|RGltIHMgQXMgc3RyaW5nID0gVFhUKEQoImBgXicgIUUjZiRXJyEkICFNIyAhVSMgIV0jNjQsIEsjISUpNkY9LiBnKigkaCN1NSAhaSMgIW4jayxdKEpBXSM3KjBIICF1IyEkZCMuICAheyNWPSYlcjgnKywgXiQpMUMkPCkuICAhJCRrNXM5bkF1NSwgJjYgIWkjMy8hJSEkRDEsIHZELFZhWSEkQT0uICAhKyRgICAgIGBgViR7OiwgISV8Jl0jICEtJG8lbSMhJGojICE1JCwgbTxVNF0jICE7JDIlYiQhJFcsICFFIy4gQyY+ST1GNiksIF4kdyctOzYkLiBULUUjVyohJCQwXyksIEMzaSN0LiEkZzJ9QC4gdzl3OUgmXylyL3M7akAmJSwgXSdDJFYvNC4kMFUkLiBFRkVGSCZfKSBAWiVsNF8mLCBnKW4kXSd7QUAmLiAgISskYC4uLi4uLmBgICFDJCAhSCRgICAgIGBgRix5KiAhTSRoIygkZz06Z10jNikgIVUkQlkhJGojLCBwLyAhXiRCMF8zXSdJJCAhRSNsaT89LCAgIWckcjFFI3wlISR6NV0oLCBrNVVXM0FCJXgybkEuICU+al9vZV0jNiRCJywgP0FsLHg5ISRFI0s/LiAgIW8kfTR5KjcmISRZNENOLCAwQWkkNikhJDkkfCwuID4yLSRAJkIlUF5KQSwgIS4zLyElXSdpJH4xLiBWL0MkYiU/L2ZIbzwsIDsnIEBrM10jYT8mJS4gICErJGAuLi4uLi5gYCAhKyRgICAgIGBgeyU3JDYkQichJFcsLCBbL3QoWiddJiwgPy56LnkqISQkMFonLCBkM0UjND1dJzQ3NS4uIHo9NilqIyEkVj0mJSwgaCNtI1csISQzLyElLCBFJ288ISRdJzElTiosICAhXiR6JSAhdSR0PyAhfSQhJCAhJyVdJyAhLyVnJyAhNyV3KCAhRSMsIDUuISRDJFIpSyYhJEMkWkUuIEszTDhbL3ctISQ5JFIpOEgqJCwgXSd5KmgjKCQhJCQwRycyNGAuLi4uLi4vIzAwMDAwMC9zaGFrZSs0LnNpemUtNDJleHNpemUrMis0LHNpemUuZXhzaXplLXNoYWtlLnNpemUtOC5zaXplK0Upbi9zd2luZys0LXN3aW5nLyNGRjAwMDAsd2FpdCxwYWdlL3NwZWVkKzEvc3BlZWQrMi8jQUFGRjAwL3NwZWVkLTItc3BlZWQvIzAwRkZDQy8jMDBBQTQ0LyNBQUNDMDAvI0FBMDBCQjEjRkZGRkZGNTUiKSkNCg0KQ2FsbCBUZXh0Qm94X0NvbnRpbnVlKCkA|AQAAAAAAAAAAAA
SU|%45|RGltIHMgQXMgc3RyaW5nID0gVFhUKEQoImBgXicgIUUjZiRXJyEkICFNIyAhVSMgIV0jNjQsIEsjISUpNkY9LiBnKigkaCN1NSAhaSMgIW4jayxdKEpBXSM3KjBIICF1IyEkZCMuICAheyNWPSYlcjgnKywgXiQpMUMkPCkuICAhJCRrNXM5bkF1NSwgJjYgIWkjMy8hJSEkRDEsIHZELFZhWSEkQT0uICAhKyRgICAgIGBgViR7OiwgISV8Jl0jICEtJG8lbSMhJGojICE1JCwgbTxVNF0jICE7JDIlYiQhJFcsICFFIy4gQyY+ST1GNiksIF4kdyctOzYkLiBULUUjVyohJCQwXyksIEMzaSN0LiEkZzJ9QC4gdzl3OUgmXylyL3M7akAmJSwgXSdDJFYvNC4kMFUkLiBFRkVGSCZfKSBAWiVsNF8mLCBnKW4kXSd7QUAmLiAgISskYC4uLi4uLmBgICFDJCAhSCRgICAgIGBgRix5KiAhTSRoIygkZz06Z10jNikgIVUkQlkhJGojLCBwLyAhXiRCMF8zXSdJJCAhRSNsaT89LCAgIWckcjFFI3wlISR6NV0oLCBrNVVXM0FCJXgybkEuICU+al9vZV0jNiRCJywgP0FsLHg5ISRFI0s/LiAgIW8kfTR5KjcmISRZNENOLCAwQWkkNikhJDkkfCwuID4yLSRAJkIlUF5KQSwgIS4zLyElXSdpJH4xLiBWL0MkYiU/L2ZIbzwsIDsnIEBrM10jYT8mJS4gICErJGAuLi4uLi5gYCAhKyRgICAgIGBgeyU3JDYkQichJFcsLCBbL3QoWiddJiwgPy56LnkqISQkMFonLCBkM0UjND1dJzQ3NS4uIHo9NilqIyEkVj0mJSwgaCNtI1csISQzLyElLCBFJ288ISRdJzElTiosICAhXiR6JSAhdSR0PyAhfSQhJCAhJyVdJyAhLyVnJyAhNyV3KCAhRSMsIDUuISRDJFIpSyYhJEMkWkUuIEszTDhbL3ctISQ5JFIpOEgqJCwgXSd5KmgjKCQhJCQwRycyNGAuLi4uLi4vIzAwMDAwMC9zaGFrZSs0LnNpemUtNDJleHNpemUrMis0LHNpemUuZXhzaXplLXNoYWtlLnNpemUtOC5zaXplK0Upbi9zd2luZys0LXN3aW5nLyNGRjAwMDAsd2FpdCxwYWdlL3NwZWVkKzEvc3BlZWQrMi8jQUFGRjAwL3NwZWVkLTItc3BlZWQvIzAwRkZDQy8jMDBBQTQ0LyNBQUNDMDAvI0FBMDBCQjEjRkZGRkZGNTUiKSkNCg0KQ2FsbCBUZXh0Qm94X1N1Ym1pdCgiIiwgLTEpAA|AQAAAAAAAAAAAA
SU|%54%65%73%74%4C%69%74%65|ZGltIHMgYXMgbG9uZyA9IC01DQoNCicgwOAgYmFzZTkyILHgwuu1xM7Esb7X1rf7tK4NCkRJTSBhIEFTIFN0cmluZyA9IFRYVChEKCJgYFMjXitkOn0pZCMxMlNEXScgIUUjQyRMKHgraCtgKW4iKSkNCg0KJyDJ6NbDzsSxvr/yw6q14yAo1eLA78rH1/PPwr3HKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZUFuY2hvcigwLCAxKQ0KJyDJ6NbDzsSxvr/yzrvWwyjTw7nYv6jX+LHqz7UpDQpDYWxsIFRleHRib3hMaXRlX1N0b3JlUG9zKHN5c3ZhbChwbGF5ZXIxc2NyeCkgKyAxMDAgKiBybmQsIHN5c3ZhbChwbGF5ZXIxc2NyeSkgKyAxMDAgKiBybmQpDQonIMno1sPOxLG+v/LX7rTzv+22yCi437bIyse4+b7dzsTX1tfUysrTprXELCDO3reoyta2r8no1sMpDQpDYWxsIFRleHRib3hMaXRlX1N0b3JlV2lkdGgoMTAwICsgcykNCicgyejWw87E19a089ChKDAgzqrErMjPtPPQoSkNCkNhbGwgVGV4dGJveExpdGVfU3RvcmVTaXplKDApDQpzICs9IDEwDQoNCicgyejWw87Esb6/8tekwfTKsbzkICjV4sDvyscgNDgwINahKSwgyrG85L3hyvi687vh19S2r8/6u9kNCkNhbGwgVGV4dGJveExpdGVfU3RvcmVUaW1lKDQ4MCkNCicgzOG9u87Esb61vc7Esb6/8s+1zbMgKM7Esb648cq9zqogYmFzZTkyILHgwussIM7Esb7M4b27uvO74cflv9XJz8PmtcTJ6NbDz+7OqsSsyM/WtSkNCicgz8K0zszhvbvHsNKq1tjQwsno1sPJ6NbDz+4NCidDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KDQonINXiwO/W2NDCyejWw8no1sPP7iBiYWxhYmFsYWFhYaGtoa0NCkNhbGwgVGV4dGJveExpdGVfU3RvcmVBbmNob3IoMCwgMSkNCkNhbGwgVGV4dGJveExpdGVfU3RvcmVQb3Moc3lzdmFsKHBsYXllcjFzY3J4KSArIDIwMCAqIHJuZCwgc3lzdmFsKHBsYXllcjFzY3J5KSArIDIwMCAqIHJuZCkNCkNhbGwgVGV4dGJveExpdGVfU3RvcmVXaWR0aCgxMDAgKyBzKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVNpemUoMCkNCnMgKz0gMTANCkNhbGwgVGV4dGJveExpdGVfU3RvcmVUaW1lKDM0MCkNCidDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKSAnINTZzOG9u9K7zPUNCicg1+624M2syrG05tTaICA4IMz1zsSxvr/yLCDI9NLRvq205tTaIDggzPXOxLG+v/LKsSwg09bM4b27wcvSu8z1LCDQwsC0tcTOxLG+v/K74bDRvsm1xLy3tfQNCg0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZUFuY2hvcigwLCAxKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZU9mZnNldCgwLCAwKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVBvcyhzeXN2YWwocGxheWVyMXNjcngpICsgNDAwICogcm5kLCBzeXN2YWwocGxheWVyMXNjcnkpICsgNDAwICogcm5kKQ0KQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVdpZHRoKDEwMCArIHMpDQonQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVNpemUoMCkNCnMgKz0gMTANCg0KJyC4+svmzea80iAxILXEzsSxvr/y16TB9MqxvOTOqiAxMDAwINahDQpDYWxsIFRleHRib3hMaXRlX1N0b3JlVGltZSgxMDApDQonIMzhvbu4+svmtcS21M/zIDE6ILbUz/MgaWQsIDM6ILj6y+bA4NDNo6zV4sDvtcQgMyDOqrj6y+YgY2hhcg0KJyDV4sDvv8nS1Mno1sPOxLG+v/K4+svmDQonIMno1sPBy7jDz+4sIM7Esb6/8rXEzrvWw77Nu+HW8Nahy6LQwiwguPrL5sS/seq21M/zDQonINXiwO/M7sHLIDEsIDMsINLizqq4+svmIGlkIM6qIDEgwODQzc6qIDMgtcS21M/zo6jV4sDvyse4+svmzea80iAxILXE1/ix6qOpDQpDYWxsIFRleHRib3hMaXRlX1N0b3JlVGFyZ2V0SWQoMSwgMykNCicgzOG9u7bUu7C/8s7Esb4NCkNhbGwgVGV4dGJveExpdGVfU3VibWl0KGEpDQoNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCg0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVBbmNob3IoMCwgMSkNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlUG9zKHN5c3ZhbChwbGF5ZXIxc2NyeCkgKyA0MDAgKiBybmQsIHN5c3ZhbChwbGF5ZXIxc2NyeSkgKyA0MDAgKiBybmQpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVdpZHRoKDEwMCArIHMgKiBybmQpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVNpemUoMTAgKiBybmQpDQoJcyArPSAxMA0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVUaW1lKDYwKQ0KDQoJJyDU2tK7uPbRrbu31tCyu7bPzOG9u7bUu7C/8qOsu+Gw0b3P1OfM4b27tcS21Luwv/K8t7X0DQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVRhcmdldElkKDEsIDMpDQpDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlQW5jaG9yKDAsIDEpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVBvcyhzeXN2YWwocGxheWVyMXNjcngpICsgNDAwICogcm5kLCBzeXN2YWwocGxheWVyMXNjcnkpICsgNDAwICogcm5kKQ0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVXaWR0aCgxMDAgKyBzICogcm5kKQ0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVTaXplKDEwICogcm5kKQ0KCXMgKz0gMTANCglDYWxsIFRleHRib3hMaXRlX1N0b3JlVGltZSgxMDApDQoNCgknINTa0ru49tGtu7fW0LK7ts/M4b27ttS7sL/yo6y74bDRvc/U58zhvbu1xLbUu7C/8ry3tfQNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlVGFyZ2V0SWQoMSwgMykNCglDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KCQ0KCQlDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCQlDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCgkJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJDQoJJ2NhbGwgX19yZW1vdmVJZHgoMikNCgkNCgkJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCgkNCgkJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZUFuY2hvcigwLCAxKQ0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVQb3Moc3lzdmFsKHBsYXllcjFzY3J4KSArIDQwMCAqIHJuZCwgc3lzdmFsKHBsYXllcjFzY3J5KSArIDQwMCAqIHJuZCkNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlV2lkdGgoMTAwICsgcyAqIHJuZCkNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlU2l6ZSgxMCAqIHJuZCkNCglzICs9IDEwDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVRpbWUoNjApDQoNCgknINTa0ru49tGtu7fW0LK7ts/M4b27ttS7sL/yo6y74bDRvc/U58zhvbu1xLbUu7C/8ry3tfQNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlVGFyZ2V0SWQoMSwgMykNCglDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KDQpEbw0KCScg1eLA78O/IDEyINahzOG9u9K7uPbQwrXEzsSxvr/yLCCy4srUzsSxvr/yzOG9u8LfvK21xL2h17PQ1A0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVBbmNob3IoMCwgMSkNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlUG9zKHN5c3ZhbChwbGF5ZXIxc2NyeCkgKyA0MDAgKiBybmQsIHN5c3ZhbChwbGF5ZXIxc2NyeSkgKyA0MDAgKiBybmQpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVdpZHRoKDEwMCArIHMgKiBybmQpDQoJQ2FsbCBUZXh0Ym94TGl0ZV9TdG9yZVNpemUoMTAgKiBybmQpDQoJcyArPSAxMA0KCUNhbGwgVGV4dGJveExpdGVfU3RvcmVUaW1lKDEwMDApDQoNCgknINTa0ru49tGtu7fW0LK7ts/M4b27ttS7sL/yo6y74bDRvc/U58zhvbu1xLbUu7C/8ry3tfQNCglDYWxsIFRleHRib3hMaXRlX1N0b3JlVGFyZ2V0SWQoMSwgMykNCglDYWxsIFRleHRib3hMaXRlX1N1Ym1pdChhKQ0KCQ0KCScgtci0/SAxMiDWoQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KCUNhbGwgU2xlZXAoMSkNCglDYWxsIFNsZWVwKDEpDQoJQ2FsbCBTbGVlcCgxKQ0KTG9vcA0KAA|AQAiAAAAAAAAAA
SU|%46%45%76%65%6E%74%54%65%73%74|DQpDYWxsIHNob3dNc2coIkZFdmVudFRlc3Q6IHJlY2l2ZSBjb250ZW50OiAiICYgVGV4dGJveF9HZXRFdmVudEluZm8oKSkNCgA|AQAAAAAAAAAAAA
SU|%46%42%6F%78%45%76%65%6E%74|DQonIElmIFRleHRib3hFdmVudF9Pbk5leHQoKSBUaGVuDQoJJyBDYWxsIHNob3dNc2coIk9uTmV4dEV2ZW50LCBwYXNzZWQgY2hhciBjb3VudDogIiAmIENTVFIoQXNjVyhNaWQoVGV4dGJveEV2ZW50X0dldFZhbHVlKCksIDEsIDEpKSkpDQonIEVuZCBJZg0KDQpJZiBUZXh0Ym94RXZlbnRfT25DaGFuZ2VCb3goKSBUaGVuDQoJQ2FsbCBzaG93TXNnKCJPbkNoYW5nZUJveCIpDQpFbmQgSWYNCgA|AQAAAAAAAAAAAA
CT|1|0001800,0002600
